using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using System.Xml.Linq;
using System.Diagnostics;
using System.Globalization;
using System.Windows.Forms;

namespace NGettextUtils
{
    public enum CSFileType { NONE, XAML, FORM, CODE };
    public enum ProjectGUIType { NONE, WPF, WinForm };

    #region stdout/stderror To log
    public class LogWriter : TextWriter
    {
        #region vars
        string _buf = string.Empty;
        TextBox _AppLog = null;
        #endregion

        public LogWriter( TextBox AppLog )
        {
            _AppLog = AppLog;
        }

        //
        // Output Text to TextBox
        //
        public override void Write( char value )
        {
            base.Write( value );
        }

        public override Encoding Encoding
        {
            get { return Encoding.UTF8; }
        }

        public void Log( string Text, bool cut = true )
        {
            if ( _AppLog != null )
            {
                _AppLog.AppendText( Text );
            }
        }
    }
    #endregion

    static class msgidCollector
    {
        private static char[] trimSymbol = new char[] { '\"', ';', '(', ')', '{', '}' };
        //private static char[] trimSymbol = new char[] { ';', '(', ')', '{', '}' };
        #region common po file header

        private static string[] po_header = new string[]
        {
            "# SOME DESCRIPTIVE TITLE.",
            "# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER",
            "# This file is distributed under the same license as the PACKAGE package.",
            "# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.",
            "#",
            "#, fuzzy",
            "msgid \"\"",
            "msgstr \"\"",
            "\"Project-Id-Version: {0}\\n\"",
            "\"Report-Msgid-Bugs-To: \\n\"",
            "\"POT-Creation-Date: {1}\\n\"",
            "\"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\\n\"",
            "\"Last-Translator: FULL NAME <EMAIL@ADDRESS>\\n\"",
            "\"Language-Team: LANGUAGE <LL@li.org>\\n\"",
            "\"MIME-Version: 1.0\\n\"",
            "\"Content-Type: text/plain; charset=UTF-8\\n\"",
            "\"Content-Transfer-Encoding: 8bit\\n\"",
            "\"X-Poedit-Language: Chinese\\n\"",
            "\"X-Poedit-Country: China\\n\"",
            "\"X-Poedit-SourceCharset: utf-8\\n\"",
            "\"X-Poedit-Basepath: .\\n\""
        };

        private static string[] cs_header = new string[]
        {
            "/* Automatically generated by GNU msgfmt.  Do not modify!  */",
            "using Gettext.{2};",
            "public class {0}_{1} : GettextResourceSet {{",
            "  public {0}_{1} ()",
            "    : base () {{",
            "  }}",
            "  protected override void ReadResources () {{",
            "    if (Table == null)",
            "      Table = new System.Collections.Hashtable();",
            "    System.Collections.Hashtable t = Table;"
        };

        private static string[] cs_footer = new string[]
        {
            "  }}",
            "}}"
        };

        #endregion

        #region tag for extract string
        private static string[] xaml_tags  = new string[] {"title", "content", "text", "header", "tooltip"};
        private static string[] xaml_attr_tran  = new string[] {"Title", "content", "text", "header", "tooltip"};
        private static string[] xaml_inner_tran  = new string[] { "TextBlock" };

        private static string[] form_attr_tran  = new string[] { "Title", "content", "text", "header", "SetToolTip", "ToolTipText", "Filter" };
        private static string[] form_inner_tran  = new string[] { "TextBlock" };
        #endregion
        
        #region properties
        private static string PathOfGettext = string.Empty;
        public static string GettextPath
        {
            get { return PathOfGettext; }
            set { PathOfGettext = value; }
        }

        private static string VersionOfGettext = "0.17";
        public static string GettextVersion
        {
            get { return VersionOfGettext; }
            set { VersionOfGettext = value; }
        }

        private static string PathOfCSC = "C:\\Windows\\Microsoft.NET\\Framework\\v3.5\\csc.exe";
        public static string cscPath
        {
            get { return PathOfCSC; }
            set { PathOfCSC = value; }
        }

        private static string poEditor = string.Empty;
        public static string PoEditor
        {
            get { return poEditor; }
            set { poEditor = value; }
        }

        private static List<string> IgnoreList = new List<string>();
        public static string[] Ignores
        {
            get { return IgnoreList.ToArray(); }
            set { IgnoreList = value.ToList<String>(); }
        }

        private static TextBox TextLog = null;
        public static TextBox AppLog
        {
            get { return TextLog; }
            set { TextLog = value; }
        }
        #endregion

        public static void Log( string log )
        {
            if ( TextLog != null )
            {
                TextLog.AppendText( log );
            }
        }

        public static string[] SystemLocales()
        {
            List<string> langs = new List<string>();
            foreach ( CultureInfo ci in CultureInfo.GetCultures( CultureTypes.AllCultures ) )
            {
                string specName = "(none)";
                try { specName = CultureInfo.CreateSpecificCulture( ci.Name ).Name; }
                catch { }
                //langs.Add( String.Format( "{0,-12}{1,-12}{2}", ci.Name, specName, ci.EnglishName ) );
                langs.Add( string.Format( "{0}", ci.Name ) );
            }

            langs.Sort();  // sort by name

            return langs.ToArray();
        }

        public static string xaml2po_o( string xaml, string catalog = null )
        {
            if ( !string.IsNullOrEmpty( xaml ) && File.Exists( xaml ) )
            {
                if ( string.IsNullOrEmpty( catalog ) )
                {
                    catalog = Path.GetFileNameWithoutExtension( xaml );
                }
                DateTime nt = DateTime.Now;
                TimeZone nz = TimeZone.CurrentTimeZone;
                TimeSpan no = nz.GetUtcOffset( nt );

                string symbol = "+";
                if ( no.ToString().StartsWith( "-" ) )
                {
                    symbol = "-";
                }
                string   pot_date = string.Format( "{0:yyyy-MM-dd HH:mm}{3}{1:00}{2:00}", nt, no.Hours, no.Minutes, symbol );

                StringBuilder lines = new StringBuilder();
                foreach ( string s in po_header )
                {
                    lines.AppendLine( string.Format( s, catalog, pot_date ) );
                }

                XDocument xmldoc = XDocument.Load( xaml );

                foreach ( XElement element in xmldoc.Descendants() )
                {

                    foreach ( string tn in xaml_inner_tran )
                    {
                        if ( string.Equals( tn, element.Name.ToString(), StringComparison.InvariantCultureIgnoreCase ) )
                        {
                            if ( !string.IsNullOrEmpty( element.Value ) )
                            {
                                lines.AppendLine( string.Format( "\n#: {0}: node -> {1}", xaml, element.Name ) );
                                lines.AppendLine( string.Format( "msgid \"{0}\"", element.Value ) );
                                lines.AppendLine( "msgstr \"\"" );
                            }
                            break;
                        }
                    }

                    foreach ( XAttribute attr in element.Attributes() )
                    {
                        foreach ( string an in xaml_attr_tran )
                        {
                            if ( string.Equals( an, attr.Name.ToString(), StringComparison.InvariantCultureIgnoreCase ) )
                            {
                                if ( !string.IsNullOrEmpty( attr.Value ) )
                                {
                                    lines.AppendLine( string.Format( "\n#: {0}: node -> {1}", xaml, attr.Name ) );
                                    lines.AppendLine( string.Format( "msgid \"{0}\"", attr.Value ) );
                                    lines.AppendLine( "msgstr \"\"" );
                                }
                                break;
                            }
                        }
                    }
                }
                string AppPath = Path.GetDirectoryName( xaml );
                StreamWriter pofile = new StreamWriter( string.Format( "{0}\\{1}.pot", AppPath, catalog ), false, new UTF8Encoding( true ) );
                pofile.WriteLine( lines );
                pofile.Close();
            }
            return null;
        }

        public static string xaml2po( string xaml, string catalog = null, string output =null )
        {
            List<string> xamlfiles = new List<string>();
            xamlfiles.Add( xaml );
            return xaml2po( xamlfiles.ToArray(), catalog, output );
        }

        public static string xaml2po( string[] xamlfiles, string catalog, string output = null )
        {
            string AppPath = System.AppDomain.CurrentDomain.BaseDirectory;

            if ( string.IsNullOrEmpty( catalog ) )
            {
                catalog = "Default";
            }

            DateTime nt = DateTime.Now;
            TimeZone nz = TimeZone.CurrentTimeZone;
            TimeSpan no = nz.GetUtcOffset( nt );

            string symbol = "+";
            if ( no.ToString().StartsWith( "-" ) )
            {
                symbol = "-";
            }
            string   pot_date = string.Format( "{0:yyyy-MM-dd HH:mm}{3}{1:00}{2:00}", nt, no.Hours, no.Minutes, symbol );

            List<string> lines = new List<string>();
            foreach ( string s in po_header )
            {
                lines.Add( string.Format( s, catalog, pot_date ) );
            }

            Dictionary<string, int> msgids = new Dictionary<string, int>();

            foreach ( string xaml in xamlfiles )
            {
                if ( !string.IsNullOrEmpty( xaml ) && File.Exists( xaml ) )
                {
                    XDocument xmldoc = XDocument.Load( xaml, LoadOptions.SetLineInfo );
                    foreach ( XElement element in xmldoc.Descendants() )
                    {
                        int lineNumber = -1;
                        if ( ( (IXmlLineInfo)element ).HasLineInfo() )
                        {
                            lineNumber = ( (IXmlLineInfo)element ).LineNumber;
                        }

                        string nodeName = string.Empty;
                        foreach ( XAttribute attr in element.Attributes() )
                        {
                            if ( string.Equals( "Name", attr.Name.LocalName.ToString(), StringComparison.InvariantCultureIgnoreCase ) )
                            {
                                nodeName = attr.Value;
                            }
                        }
                        if ( string.IsNullOrEmpty( nodeName ) )
                        {
                            nodeName = element.Name.LocalName;
                        }

                        foreach ( string tn in xaml_inner_tran )
                        {
                            if ( string.Equals( tn, element.Name.LocalName, StringComparison.InvariantCultureIgnoreCase ) )
                            {
                                if ( !string.IsNullOrEmpty( element.Value ) )
                                {
                                    if ( msgids.ContainsKey( element.Value ) )
                                    {
                                        int index = -1;
                                        msgids.TryGetValue( element.Value, out index );
                                        lines.Insert( index, string.Format( "#: {0}:{1} -> {2}.{3}", xaml, lineNumber, nodeName ) );
                                        msgids[element.Value] = index + 1;
                                    }
                                    else
                                    {
                                        lines.Add( "" );
                                        lines.Add( string.Format( "#: {0}:{1} -> {2}.{3}", xaml, lineNumber, nodeName ) );
                                        lines.Add( string.Format( "msgid \"{0}\"", element.Value ) );
                                        lines.Add( "msgstr \"\"" );
                                        msgids.Add( element.Value, lines.Count - 2 );
                                    }
                                }
                                break;
                            }
                        }

                        foreach ( XAttribute attr in element.Attributes() )
                        {
                            foreach ( string an in xaml_attr_tran )
                            {
                                if ( string.Equals( an, attr.Name.LocalName, StringComparison.InvariantCultureIgnoreCase ) )
                                {
                                    if ( !string.IsNullOrEmpty( attr.Value ) )
                                    {
                                        if ( msgids.ContainsKey( attr.Value ) )
                                        {
                                            int index = -1;
                                            msgids.TryGetValue( attr.Value, out index );
                                            lines.Insert( index, string.Format( "#: {0}:{1} -> {2}.{3}", xaml, lineNumber, nodeName, attr.Name ) );
                                            msgids[attr.Value] = index + 1;
                                        }
                                        else
                                        {
                                            lines.Add( "" );
                                            lines.Add( string.Format( "#: {0}:{1} -> {2}.{3}", xaml, lineNumber, nodeName, attr.Name ) );
                                            lines.Add( string.Format( "msgid \"{0}\"", attr.Value ) );
                                            lines.Add( "msgstr \"\"" );
                                            msgids.Add( attr.Value, lines.Count - 2 );
                                        }
                                    }
                                    break;
                                }
                            }
                        }
                    }
                }
            }

            StringBuilder polines = new StringBuilder();
            foreach ( string line in lines )
            {
                polines.AppendLine( line );
            }
            if ( string.IsNullOrEmpty( output ) )
            {
                string fo = string.Format( "{0}\\{1}.pot", AppPath, catalog );
                StreamWriter pofile = new StreamWriter( fo, false, new UTF8Encoding( false ) );
                pofile.WriteLine( polines );
                pofile.Close();
                return fo;
            }
            else
            {
                string fo = string.Format( "{0}", output );
                StreamWriter pofile = new StreamWriter( fo, false, new UTF8Encoding( false ) );
                pofile.WriteLine( polines );
                pofile.Close();
                return fo;
            }
        }

        public static string form2po( string cs, string catalog = null, string output = null )
        {
            List<string> csfiles = new List<string>();
            csfiles.Add( cs );
            return form2po( csfiles.ToArray(), catalog, output );
        }

        public static string form2po( string[] csfiles, string catalog = null, string output = null )
        {
            string AppPath = System.AppDomain.CurrentDomain.BaseDirectory;

            if ( string.IsNullOrEmpty( catalog ) )
            {
                catalog = "Default";
            }

            DateTime nt = DateTime.Now;
            TimeZone nz = TimeZone.CurrentTimeZone;
            TimeSpan no = nz.GetUtcOffset( nt );

            string symbol = "+";
            if ( no.ToString().StartsWith( "-" ) )
            {
                symbol = "-";
            }
            string   pot_date = string.Format( "{0:yyyy-MM-dd HH:mm}{3}{1:00}{2:00}", nt, no.Hours, no.Minutes, symbol );

            List<string> lines = new List<string>();
            foreach ( string s in po_header )
            {
                lines.Add( string.Format( s, catalog, pot_date ) );
            }

            Dictionary<string, int> msgids = new Dictionary<string, int>();

            foreach ( string cs in csfiles )
            {
                if ( !string.IsNullOrEmpty( cs ) && File.Exists( cs ) )
                {
                    StreamReader csfile = new StreamReader( cs, new UTF8Encoding( false ), false );
                    int lineNumber = 0;
                    while(true)
                    {
                        string line = csfile.ReadLine();
                        if ( line == null )
                        {
                            csfile.Close();
                            break;
                        }
                        else
                        {
                            lineNumber++;
                            foreach ( string an in form_attr_tran )
                            {
                                if ( string.Equals( "SetToolTip", an, StringComparison.InvariantCultureIgnoreCase ) )
                                {
                                    string findstr = string.Format( ".SetToolTip(" );
                                    int pos = line.IndexOf( findstr, StringComparison.InvariantCultureIgnoreCase );
                                    if ( pos >= 0 )
                                    {
                                        //String Value_tmp = line.Substring( pos + findstr.Length ).TrimStart( trimSymbol ).TrimEnd( trimSymbol );
                                        findstr = ", \"";
                                        pos = line.IndexOf( findstr, pos + 1 );
                                        if ( pos >= 0 )
                                        {
                                            string Value = line.Remove(line.Length-3).Substring( pos + findstr.Length );//.TrimStart( trimSymbol ).TrimEnd( trimSymbol );
                                            if ( string.IsNullOrEmpty( Value ) ) continue;
                                            if ( msgids.ContainsKey( Value ) )
                                            {
                                                int index = -1;
                                                msgids.TryGetValue( Value, out index );
                                                lines.Insert( index, string.Format( "#: {0}:{1}", cs, lineNumber ) );
                                                msgids[Value] = index + 1;
                                            }
                                            else
                                            {
                                                lines.Add( "" );
                                                lines.Add( string.Format( "#: {0}:{1}", cs, lineNumber ) );
                                                lines.Add( string.Format( "msgid \"{0}\"", Value ) );
                                                lines.Add( "msgstr \"\"" );
                                                msgids.Add( Value, lines.Count - 2 );
                                            }
                                            break;
                                        }
                                    }
                                }
                                else
                                {
                                    string findstr = string.Format( ".{0} = ", an );
                                    int pos = line.IndexOf( findstr, StringComparison.InvariantCultureIgnoreCase );
                                    if ( pos >= 0 )
                                    {
                                        string Value = line.Substring( pos + findstr.Length ).TrimStart( trimSymbol ).TrimEnd( trimSymbol );
                                        if ( string.IsNullOrEmpty( Value ) ) continue;
                                        if ( msgids.ContainsKey( Value ) )
                                        {
                                            int index = -1;
                                            msgids.TryGetValue( Value, out index );
                                            lines.Insert( index, string.Format( "#: {0}:{1}", cs, lineNumber ) );
                                            msgids[Value] = index + 1;
                                        }
                                        else
                                        {
                                            lines.Add( "" );
                                            lines.Add( string.Format( "#: {0}:{1}", cs, lineNumber ) );
                                            lines.Add( string.Format( "msgid \"{0}\"", Value ) );
                                            lines.Add( "msgstr \"\"" );
                                            msgids.Add( Value, lines.Count - 2 );
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    csfile.Close();
                }
            }
            StringBuilder polines = new StringBuilder();
            foreach ( string line in lines )
            {
                polines.AppendLine( line );
            }
            if ( string.IsNullOrEmpty( output ) )
            {
                string fo = string.Format( "{0}.pot", catalog );
                StreamWriter pofile = new StreamWriter( fo, false, new UTF8Encoding( false ) );
                pofile.WriteLine( polines );
                pofile.Close();
                return fo;
            }
            else
            {
                string fo = string.Format( "{0}", output );
                StreamWriter pofile = new StreamWriter( fo, false, new UTF8Encoding( false ) );
                pofile.WriteLine( polines );
                pofile.Close();
                return fo;
            }
        }

        public static string cs2po( string cs, string catalog = null, string output = null )
        {
            List<string> csfiles = new List<string>();
            csfiles.Add( cs );
            return cs2po( csfiles.ToArray(), catalog, output );
        }

        public static string cs2po( string[] csfiles, string catalog = null, string output = null )
        {
            List<string> args = new List<string>();
            if ( string.IsNullOrEmpty( catalog ) )
            {
                catalog = "Default";
            }

            foreach ( string cs in csfiles )
            {
                string app = string.Format( "{0}\\bin\\{1}", GettextPath, "xgettext.exe" ).Replace("\\\\", "\\");
                //args.Add("xgettext.exe");
                args.Add( "--from-code=UTF-8" );
                args.Add( "--language=C#" );
                args.Add( "--add-location" );
                //args.Add( "--force-po" );
                args.Add( "--no-wrap" );
                args.Add( "--omit-header" );
                args.Add( "--keyword=_" );
                if ( string.Compare( GettextVersion, "0.17" ) >= 0 )
                {
                    args.Add( string.Format( "--package-name={0}", catalog ) );
                    args.Add( string.Format( "--package-version={0}", "1.0.0.0" ) );
                }
                if ( !string.IsNullOrEmpty( output ) && File.Exists( output ) )
                {
                    args.Add( "--join-existing" );
                    args.Add( string.Format( "--output={0}", output ) );
                }
                else
                {
                    args.Add( string.Format( "--output={0}.pot", catalog ) );
                    args.Add( string.Format( "--default-domain={0}", catalog ) );
                }
                args.Add( cs );

                string WorkingDirectory = string.Empty;
                if ( string.IsNullOrEmpty( output ) )
                {
                    WorkingDirectory = AppDomain.CurrentDomain.BaseDirectory;
                }
                else
                {
                    if ( File.Exists( output ) )
                    {
                        WorkingDirectory = Path.GetDirectoryName( Path.GetFullPath( output ) );
                    }
                }
                ShellCall( app, args.ToArray(), WorkingDirectory );
            }
            return null;
        }

        public static string mergepo( string po, string pot, string catalog = null, string locale = "en-US" )
        {
            List<string> args = new List<string>();
            if ( string.IsNullOrEmpty( catalog ) )
            {
                catalog = "Default";
            }

            string app = string.Format( "{0}\\bin\\{1}", GettextPath, "msgmerge.exe" ).Replace( "\\\\", "\\" );
            args.Add( "--update" );
            args.Add( "--backup=off" );
            args.Add( "--verbose" );
            if ( string.Compare( GettextVersion, "0.17" ) >= 0 )
            {
                args.Add( "--previous" );
            }
            args.Add( "--add-location" );
            //args.Add( "--force-po" );
            args.Add( po );
            args.Add( pot );

            string WorkingDirectory = string.Empty;
            if ( string.IsNullOrEmpty( po ) )
            {
                WorkingDirectory = AppDomain.CurrentDomain.BaseDirectory;
            }
            else
            {
                if ( File.Exists( po ) )
                {
                    WorkingDirectory = Path.GetDirectoryName( Path.GetFullPath( po ) );
                }
            }
            ShellCall( app, args.ToArray(), WorkingDirectory );

            return null;
        }

        public static string editpo( string po, string catalog = null, string locale = "en-US" )
        {
            List<string> args = new List<string>();
            if ( string.IsNullOrEmpty( catalog ) )
            {
                catalog = "Default";
            }

            string app = string.Format( "{0}", poEditor);

            args.Add( po );

            string WorkingDirectory = string.Empty;
            if ( string.IsNullOrEmpty( po ) )
            {
                WorkingDirectory = AppDomain.CurrentDomain.BaseDirectory;
            }
            else
            {
                if ( File.Exists( po ) )
                {
                    WorkingDirectory = Path.GetDirectoryName( Path.GetFullPath( po ) );
                }
            }
            ShellCall( app, args.ToArray(), WorkingDirectory, false );

            return null;
        }

        public static string po2mo( string po, string catalog = null, string locale = "en-US" )
        {
            List<string> args = new List<string>();
            if ( string.IsNullOrEmpty( catalog ) )
            {
                catalog = "Default";
            }

            string app = string.Format( "{0}\\bin\\{1}", GettextPath, "msgfmt.exe" ).Replace( "\\\\", "\\" );
            args.Add( $"-o {po.Replace(".po", ".mo")}" );
            args.Add( po );

            string WorkingDirectory = string.Empty;
            if ( string.IsNullOrEmpty( po ) )
            {
                WorkingDirectory = AppDomain.CurrentDomain.BaseDirectory;
            }
            else
            {
                if ( File.Exists( po ) )
                {
                    WorkingDirectory = Path.GetDirectoryName( Path.GetFullPath( po ) );
                }
            }
            ShellCall( app, args.ToArray(), WorkingDirectory );

            return null;
        }

        public static string po2cs( string csType, string po, string catalog, string locale = "en-US", string output =null )
        {
            List<string> lines = new List<string>();
            locale = locale.Replace( "-", "_" );
            foreach ( string s in cs_header )
            {
                lines.Add( string.Format( s, catalog, locale,  csType) );
            }

            StreamReader pofile = new StreamReader( po, new UTF8Encoding( false ), false);
            while ( true )
            {
                string msgid = string.Empty;
                string msgstr = string.Empty;

                string line = pofile.ReadLine();
                if ( line == null )
                {
                    pofile.Close();
                    break;
                }
                if ( line.StartsWith( "#" ) ) continue;
                else if ( string.IsNullOrEmpty( line.Trim() ) ) continue;
                else if ( line.StartsWith( "msgid" ) )
                {
                    msgid = line.Substring( 6 );//.TrimStart( trimSymbol ).TrimEnd( trimSymbol );
                    line = pofile.ReadLine();
                    msgstr = line.Substring( 7 );//.TrimStart( trimSymbol ).TrimEnd( trimSymbol );

                    if ( !string.Equals( "\"\"", msgstr, StringComparison.InvariantCultureIgnoreCase ) )
                    {
                        lines.Add( string.Format( "    t.Add({0}, {1});", msgid, msgstr ) );
                    }
                }
                else if ( line.StartsWith( "msgstr" ) )
                {

                }
            }
            pofile.Close();

            foreach ( string s in cs_footer )
            {
                lines.Add( string.Format( s, catalog, locale ) );
            }

            StringBuilder cslines = new StringBuilder();
            foreach ( string line in lines )
            {
                cslines.AppendLine( line );
            }
            if ( string.IsNullOrEmpty( output ) )
            {
                string fo = Path.ChangeExtension( po, ".cs" );
                StreamWriter csfile = new StreamWriter( fo, false, new UTF8Encoding( false ) );
                csfile.WriteLine( cslines );
                csfile.Close();
                return fo;
            }
            else
            {
                string fo = string.Format( "{0}", output );
                StreamWriter csfile = new StreamWriter( fo, false, new UTF8Encoding( false ) );
                csfile.WriteLine( cslines );
                csfile.Close();
                return fo;
            }
            //return null;
        }

        public static string cs2dll( string csType, string cs, string catalog = null, string locale = "en-US" )
        {
            string AppPath = System.AppDomain.CurrentDomain.BaseDirectory;

            List<string> args = new List<string>();
            if ( string.IsNullOrEmpty( catalog ) )
            {
                catalog = "Default";
            }

            //String app = "C:\\Windows\\Microsoft.NET\\Framework\\v3.5\\csc.exe";
            //String app = @"C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe";
            string app = cscPath;
            args.Add( "/target:library" );
            //args.Add( "/utf8output" );
            args.Add( string.Format( "/out:{1}\\{0}.resources.dll", catalog, locale ) );
            args.Add( string.Format( "/reference:{1}\\Gettext.{0}.dll", csType, AppPath ) );
            args.Add( "/optimize+" );
            //args.Add( "/nologo" );
            args.Add( cs );

            string WorkingDirectory = string.Empty;
            if ( string.IsNullOrEmpty( cs ) )
            {
                WorkingDirectory = AppPath;
            }
            else
            {
                if ( File.Exists( cs ) )
                {
                    WorkingDirectory = Path.GetDirectoryName( Path.GetFullPath( cs ) );
                }
            }
            ShellCall( app, args.ToArray(), WorkingDirectory );

            return null;
        }

        public static int ShellCall( string app, string[] args, string WorkingDirectory, bool wait =true )
        {
            int exitcode = 0;
            ProcessStartInfo startInfo = new ProcessStartInfo();
            startInfo.WorkingDirectory = WorkingDirectory;
            if ( string.IsNullOrEmpty( app ) )
            {
                startInfo.UseShellExecute = true;
                startInfo.RedirectStandardOutput = false;
                startInfo.RedirectStandardError = false;

                startInfo.CreateNoWindow = false;
                startInfo.WindowStyle = ProcessWindowStyle.Normal;

                startInfo.FileName = string.Join( " ", args );
                startInfo.Arguments = "";
            }
            else
            {
                startInfo.UseShellExecute = false;
                startInfo.RedirectStandardOutput = true;
                startInfo.RedirectStandardError = true;

                startInfo.CreateNoWindow = true;
                startInfo.WindowStyle = ProcessWindowStyle.Hidden;

                startInfo.FileName = app;
                startInfo.Arguments = string.Join( " ", args );
            }

            //if ( app.IndexOf( "csc0.exe", StringComparison.InvariantCultureIgnoreCase ) >= 0 )
            //{
            //    startInfo.StandardOutputEncoding = Encoding.UTF8;
            //    startInfo.StandardErrorEncoding = Encoding.UTF8;
            //}

            Process gettext = Process.Start( startInfo );

            if ( !startInfo.UseShellExecute )
            {
                if ( startInfo.RedirectStandardOutput )
                {
                    string stdout = gettext.StandardOutput.ReadToEnd();
                    Log( stdout );
                }
                if ( startInfo.RedirectStandardError )
                {
                    string stderr = gettext.StandardError.ReadToEnd();
                    Log( stderr );
                }
            }
            if ( wait )
            {
                gettext.WaitForExit();

                while ( true )
                {
                    if ( gettext.HasExited )
                    {
                        //if(File.Exists(po)) po="";
                        break;
                    }
                }
                exitcode = gettext.ExitCode;
                gettext.Close();
            }
            return exitcode;
        }

        public static void DirectoryCopy( string sourceDirName, string destDirName, bool copySubDirs=false, bool overwrite=true )
        {
            DirectoryInfo dir = new DirectoryInfo( sourceDirName );
            DirectoryInfo[] dirs = dir.GetDirectories();

            if ( !dir.Exists )
            {
                throw new DirectoryNotFoundException(
                    "Source directory does not exist or could not be found: "
                    + sourceDirName );
            }

            if ( !Directory.Exists( destDirName ) )
            {
                Directory.CreateDirectory( destDirName );
            }

            FileInfo[] files = dir.GetFiles();
            foreach ( FileInfo file in files )
            {
                string temppath = Path.Combine( destDirName, file.Name );
                file.CopyTo( temppath, overwrite );
            }

            if ( copySubDirs )
            {
                foreach ( DirectoryInfo subdir in dirs )
                {
                    string temppath = Path.Combine( destDirName, subdir.Name );
                    DirectoryCopy( subdir.FullName, temppath, copySubDirs, overwrite );
                }
            }
        }

    }

    public class ProjectInfo
    {
        #region properties
        private string PathOfGettext = string.Empty;
        public string GettextPath
        {
            get { return PathOfGettext; }
            set { PathOfGettext = value; }
        }

        private bool FileLoaded = false;
        public bool Loaded
        {
            get { return FileLoaded; }
            set { FileLoaded = value; }
        }

        private ProjectGUIType ProjectGUI = ProjectGUIType.WinForm;
        public string GUIType
        {
            get { return Enum.GetName( typeof( ProjectGUIType ), ProjectGUI ); }
            //set { ProjectGUI = (ProjectGUIType)Enum.Parse( typeof( ProjectGUIType ), value ); }
        }

        private string ProjectDomain = string.Empty;
        public string Domain
        {
            get { return ProjectDomain; }
            set { ProjectDomain = value; }
        }

        private string ProjectRoot = string.Empty;
        public string RootFolder
        {
            get { return ProjectRoot; }
            set { ProjectRoot = value; }
        }

        private string ProjectFile = string.Empty;
        public string csproj
        {
            get { return ProjectFile; }
            set { ProjectFile = value; }
        }

        private string ProjectGUID = string.Empty;
        public string GUID
        {
            get { return ProjectGUID; }
            set { ProjectGUID = value; }
        }

        private List<string> XamlFileList = new List<string>();
        public string[] XamlFiles
        {
            get { return XamlFileList.ToArray(); }
        }

        private List<string> FormFileList = new List<string>();
        public string[] FormFiles
        {
            get { return FormFileList.ToArray(); }
        }

        private List<string> CodeFileList = new List<string>();
        public string[] CodeFiles
        {
            get { return CodeFileList.ToArray(); }
        }
        #endregion

        public void Load( string project )
        {
            string AppPath = System.AppDomain.CurrentDomain.BaseDirectory;

            Directory.SetCurrentDirectory( string.Format( "{0}\\{1}", ProjectRoot, Path.GetDirectoryName( project ) ) );

            string csproj = Path.GetFileName( project );

            if ( !string.IsNullOrEmpty( csproj ) && File.Exists( csproj ) )
            {
                XamlFileList.Clear();
                FormFileList.Clear();
                CodeFileList.Clear();

                XmlDocument xmldoc = new XmlDocument();
                xmldoc.Load( csproj );

                XmlNodeList elements = null;

                //XmlNodeList elements = xmldoc.GetElementsByTagName("RootNamespace");
                elements = xmldoc.GetElementsByTagName( "AssemblyName" );
                foreach ( XmlElement element in elements )
                {
                    if ( !string.IsNullOrEmpty( element.InnerText ) )
                    {
                        ProjectDomain = element.InnerText;
                        break;
                    }
                }

                elements = xmldoc.GetElementsByTagName( "Reference" );
                foreach ( XmlElement element in elements )
                {
                    foreach ( XmlAttribute attr in element.Attributes )
                    {
                        if ( string.Equals( "Include", attr.Name, StringComparison.InvariantCultureIgnoreCase ) )
                        {
                            if ( !string.IsNullOrEmpty( attr.Value ) )
                            {
                                if ( attr.Value.IndexOf( "PresentationCore", StringComparison.InvariantCultureIgnoreCase ) >= 0 )
                                {
                                    ProjectGUI = ProjectGUIType.WPF;
                                }
                                //else if ( attr.Value.IndexOf( "System.Windows.Forms", StringComparison.InvariantCultureIgnoreCase ) >= 0 )
                                //{
                                //    ProjectGUI = ProjectGUIType.WinForm;
                                //}
                            }
                        }
                        break;
                    }
                }

                elements = xmldoc.GetElementsByTagName( "ApplicationDefinition" );
                foreach ( XmlElement element in elements )
                {
                    foreach ( XmlAttribute attr in element.Attributes )
                    {
                        if ( string.Equals( "Include", attr.Name, StringComparison.InvariantCultureIgnoreCase ) )
                        {
                            if ( !string.IsNullOrEmpty( attr.Value ) )
                            {
                                XamlFileList.Add( attr.Value );
                                break;
                            }
                        }
                    }
                }

                CSFileType ftype = CSFileType.NONE;
                elements = xmldoc.GetElementsByTagName( "Page" );
                foreach ( XmlElement element in elements )
                {
                    foreach ( XmlAttribute attr in element.Attributes )
                    {
                        if ( string.Equals( "Include", attr.Name, StringComparison.InvariantCultureIgnoreCase ) )
                        {
                            if ( !string.IsNullOrEmpty( attr.Value ) )
                            {
                                XamlFileList.Add( attr.Value );
                                break;
                            }
                        }
                    }
                }

                bool AutoGen = false;
                XmlNodeList childs = null;
                elements = xmldoc.GetElementsByTagName( "Compile" );
                foreach ( XmlElement element in elements )
                {
                    childs = element.GetElementsByTagName( "AutoGen" );
                    foreach ( XmlElement child in childs )
                    {
                        if ( string.Equals( "True", child.InnerText, StringComparison.InvariantCultureIgnoreCase ) )
                        {
                            AutoGen = true;
                        }
                        break;
                    }
                    if ( AutoGen ) continue;

                    childs = element.GetElementsByTagName( "SubType" );
                    foreach ( XmlElement child in childs)
                    {
                        if ( string.Equals( "Designer", child.InnerText, StringComparison.InvariantCultureIgnoreCase ) )
                        {
                            ftype = CSFileType.XAML;
                        }
                        else if ( string.Equals( "Form", child.InnerText, StringComparison.InvariantCultureIgnoreCase ) )
                        {
                            ftype = CSFileType.CODE;
                        }
                        else if ( string.Equals( "Code", child.InnerText, StringComparison.InvariantCultureIgnoreCase ) )
                        {
                            ftype = CSFileType.CODE;
                        }
                        break;
                    }

                    foreach ( XmlAttribute attr in element.Attributes )
                    {
                        if ( string.Equals( "Include", attr.Name, StringComparison.InvariantCultureIgnoreCase ) )
                        {
                            if ( !string.IsNullOrEmpty( attr.Value ) )
                            {
                                if ( attr.Value.IndexOf( "Designer", StringComparison.InvariantCultureIgnoreCase ) >= 0 )
                                {
                                    ftype = CSFileType.FORM;
                                    FormFileList.Add( attr.Value );
                                }
                                else
                                {
                                    CodeFileList.Add( attr.Value );
                                }
                                break;
                            }
                        }
                    }
                }
                FileLoaded = true;
            }
        }

        public void Process()
        {
            if ( FileLoaded )
            {
                Directory.SetCurrentDirectory( string.Format( "{0}\\{1}", ProjectRoot, Path.GetDirectoryName( ProjectFile ) ) );
                if ( XamlFiles.Length > 0 )
                {
                    msgidCollector.xaml2po( XamlFiles, Domain, string.Format( "{0}.pot", Domain ) );
                }
                if ( FormFiles.Length > 0 )
                {
                    msgidCollector.form2po( FormFiles, Domain, string.Format( "{0}.pot", Domain ) );
                }
                if ( CodeFiles.Length > 0 )
                {
                    msgidCollector.cs2po( CodeFiles, Domain, string.Format( "{0}.pot", Domain ) );
                }
            }
        }

        public void MakeLangPO( string locale )
        {
            if ( !string.IsNullOrEmpty( locale ) )
            {
                if ( FileLoaded )
                {
                    string SrcFile = string.Empty;
                    string DstFile = string.Empty;

                    Directory.SetCurrentDirectory( string.Format( "{0}\\{1}", ProjectRoot, Path.GetDirectoryName( ProjectFile ) ) );

                    SrcFile = string.Format( "{0}.pot", ProjectDomain );
                    DstFile = string.Format( "{0}_{1}.po", ProjectDomain, locale );
                    if ( File.Exists( SrcFile ) )
                    {
                        if(File.Exists(DstFile))
                        {
                            msgidCollector.mergepo(DstFile, SrcFile, ProjectDomain, locale);
                        }
                        else
                        {
                            File.Copy( SrcFile, DstFile );
                        }
                    }
                }
            }
        }

        public void EditPO( string locale )
        {
            if ( !string.IsNullOrEmpty( locale ) )
            {
                if ( FileLoaded )
                {
                    string SrcFile = string.Empty;

                    Directory.SetCurrentDirectory( string.Format( "{0}\\{1}", ProjectRoot, Path.GetDirectoryName( ProjectFile ) ) );

                    SrcFile = string.Format( "{0}_{1}.po", ProjectDomain, locale );
                    if ( File.Exists( SrcFile ) )
                    {
                        msgidCollector.editpo( SrcFile );
                    }
                }
            }
        }

        public void MakeLangDll( String locale )
        {
            if ( !String.IsNullOrEmpty( locale ) )
            {
                if ( FileLoaded )
                {
                    Directory.SetCurrentDirectory( String.Format( "{0}\\{1}", ProjectRoot, Path.GetDirectoryName( ProjectFile ) ) );

                    String poFile = String.Format( "{0}_{1}.po", ProjectDomain, locale );
                    String csFile = String.Format( "{0}_{1}.cs", ProjectDomain, locale );
                    String dllFile = String.Format( "{1}\\{0}.resources.dll", ProjectDomain, locale );
                    if ( File.Exists( poFile ) )
                    {
                        if ( ProjectGUI != ProjectGUIType.NONE )
                        {
                            msgidCollector.po2cs( GUIType, poFile, ProjectDomain, locale );

                            if ( !Directory.Exists( locale ) )
                            {
                                Directory.CreateDirectory( locale );
                            }
                            msgidCollector.cs2dll( GUIType, csFile, ProjectDomain, locale );
                            msgidCollector.DirectoryCopy( locale, String.Format( "bin\\Debug\\{0}", locale ), false );
                            msgidCollector.DirectoryCopy( locale, String.Format( "bin\\Release\\{0}", locale ), false );
                        }
                    }
                }
            }
        }

        public void MakeLangMO( string locale )
        {
            if ( !string.IsNullOrEmpty( locale ) )
            {
                if ( FileLoaded )
                {
                    Directory.SetCurrentDirectory( string.Format( "{0}\\{1}", ProjectRoot, Path.GetDirectoryName( ProjectFile ) ) );

                    string localeFolder = $"locale\\{locale}\\LC_MESSAGES";
                    string poFile = $"{localeFolder}\\{ProjectDomain}.po";
                    string moFile = $"{localeFolder}\\{ProjectDomain}.mo";
                    if ( File.Exists( poFile ) )
                    {
                        if ( ProjectGUI != ProjectGUIType.NONE )
                        {
                            if ( !Directory.Exists( localeFolder ) )
                            {
                                Directory.CreateDirectory( localeFolder );
                            }
                            msgidCollector.po2mo( poFile, ProjectDomain, locale );
                            msgidCollector.DirectoryCopy( locale, $"bin\\Debug\\{locale}", false );
                            msgidCollector.DirectoryCopy( locale, $"bin\\Release\\{locale}", false );
                        }
                    }
                }
            }
        }

        public void Patch()
        {
            if ( FileLoaded )
            {
                Directory.SetCurrentDirectory( string.Format( "{0}\\{1}", ProjectRoot, Path.GetDirectoryName( ProjectFile ) ) );

                #region Copy Gettext.WPF.dll & Gettext.WinForm.dll to solution project folder
                string FileName = string.Format( "Gettext.{0}.dll", GUIType );
                string SrcFile = string.Format( "{1}\\{0}", FileName, AppDomain.CurrentDomain.BaseDirectory);
                string DstFile = string.Format( "{1}\\{0}", FileName, "." );

                File.Copy( SrcFile, DstFile, true );

                #endregion

                #region Patch .csproj file
                string csproj = Path.GetFileName( ProjectFile );

                if ( !string.IsNullOrEmpty( csproj ) && File.Exists( csproj ) )
                {
                    XmlDocument xmldoc = new XmlDocument();
                    xmldoc.Load( csproj );

                    XmlNodeList elements = null;

                    elements = xmldoc.GetElementsByTagName( "ItemGroup" );
                    foreach ( XmlElement element in elements )
                    {
                        XmlNodeList References = element.GetElementsByTagName( "Reference" );
                        if ( References.Count > 0 )
                        {
                            bool csprojPatched = false;
                            foreach ( XmlNode Reference in References )
                            {
                                foreach ( XmlAttribute attr in Reference.Attributes )
                                {
                                    if ( string.Equals( "Include", attr.Name, StringComparison.InvariantCultureIgnoreCase ) )
                                    {
                                        if ( !string.IsNullOrEmpty( attr.Value ) )
                                        {
                                            if ( string.Equals( "Gettext.WinForm", attr.Value, StringComparison.InvariantCultureIgnoreCase ) )
                                            {
                                                csprojPatched = true;
                                                break;
                                            }
                                            else if ( string.Equals( "Gettext.WPF", attr.Value, StringComparison.InvariantCultureIgnoreCase ) )
                                            {
                                                csprojPatched = true;
                                                break;
                                            }
                                        }
                                    }
                                }
                                if ( csprojPatched ) break;
                            }
                            if ( !csprojPatched )
                            {
                                XmlElement gettext_name = xmldoc.CreateElement( "Reference", "http://schemas.microsoft.com/developer/msbuild/2003");
                                gettext_name.SetAttribute( "Include", string.Format( "Gettext.{0}", GUIType ) );
                                //gettext_name.InnerText = String.Format( "<HintPath>.\\Gettext.{0}.dll</HintPath>", GUIType );
                                XmlElement gettext_path = xmldoc.CreateElement( "HintPath", "http://schemas.microsoft.com/developer/msbuild/2003" );
                                gettext_path.InnerText = string.Format( ".\\Gettext.{0}.dll", GUIType );
                                gettext_name.AppendChild( gettext_path );

                                element.AppendChild( gettext_name );
                                csprojPatched = true;
                                break;
                            }
                        }
                    }
                    xmldoc.Save( csproj );
                }
                #endregion

                #region Patch .cs file
                foreach ( string code in CodeFileList )
                {
                    if ( code.IndexOf( "Properties\\", StringComparison.InvariantCultureIgnoreCase ) >= 0 ) continue;

                    if ( File.Exists( code ) )
                    {
                        string gettext = string.Format( "using Gettext.{0};", GUIType );

                        List<string> lines = new List<string>();

                        bool codePatched = false;
                        StreamReader csfile = new StreamReader( code, new UTF8Encoding( true ), true );
                        while ( true )
                        {
                            string line = csfile.ReadLine();
                            if ( line == null )
                            {
                                csfile.Close();
                                break;
                            }
                            if ( line.IndexOf( gettext, StringComparison.InvariantCultureIgnoreCase ) >= 0 )
                            {
                                codePatched = true;
                                break;
                            }
                            lines.Add( line );
                        }
                        if ( !codePatched )
                        {
                            lines.Insert( 0, gettext );

                            StringBuilder cslines = new StringBuilder();
                            foreach ( string line in lines )
                            {
                                cslines.AppendLine( line );
                                if ( line.Trim().IndexOf( "InitializeComponent();", StringComparison.InvariantCultureIgnoreCase ) == 0 )
                                {
                                    string i18n = string.Format("            I18N i10n = new I18N( \"{0}\", this );", ProjectDomain);
                                    string i18nalt = string.Format( "            //I18N i10n = new I18N( {0}, this );", "Path.GetFileNameWithoutExtension( Application.ExecutablePath )" );
                                    string i18nusage = string.Format( "            //edMsg.Text = I18N._(\"Text Your want to translating\");" );

                                    cslines.AppendLine( i18n );
                                    cslines.AppendLine( i18nalt );
                                    cslines.AppendLine( i18nusage );
                                }
                            }
                            StreamWriter csfile_o = new StreamWriter( code, false, new UTF8Encoding( true ) );
                            csfile_o.WriteLine( cslines );
                            csfile_o.Close();
                        }
                    }
                }
                #endregion
            }
        }

        public ProjectInfo()
        {

        }

        public ProjectInfo( string csfile )
        {
            Load( csfile );
        }

    }

    public class SolutionInfo
    {
        private static char[] trimSymbol = new char[] { '\"', ';' };

        #region properties
        private string PathOfGettext = string.Empty;
        public string GettextPath
        {
            get { return PathOfGettext; }
            set { PathOfGettext = value; }
        }

        private bool FileLoaded = false;
        public bool Loaded
        {
            get { return FileLoaded; }
            set { FileLoaded = value; }
        }

        private string SolutionDomain = string.Empty;
        public string Domain
        {
            get { return SolutionDomain; }
        }

        private string SolutionFolder = string.Empty;
        public string Folder
        {
            get { return SolutionFolder; }
        }

        private List<ProjectInfo> ProjectList = new List<ProjectInfo>();
        public ProjectInfo[] Projects
        {
            get { return ProjectList.ToArray(); }
        }
        #endregion

        public void Load( string Solution )
        {
            if ( string.IsNullOrEmpty( SolutionFolder ) )
            {
                SolutionFolder = Path.GetDirectoryName( Path.GetFullPath( Solution ) );
            }

            Directory.SetCurrentDirectory( SolutionFolder );

            string sln = Path.GetFileName(Solution);
            if ( File.Exists( sln ) )
            {
                ProjectList.Clear();

                StreamReader slnfile = new StreamReader( sln, new UTF8Encoding( false ), false );
                while ( true )
                {
                    string line = slnfile.ReadLine();
                    if ( line == null )
                    {
                        slnfile.Close();
                        break;
                    }
                    else
                    {
                        if ( line.StartsWith( "Project(\"", StringComparison.InvariantCultureIgnoreCase ) )
                        {
                            string findstr = "\") = ";
                            int pos = line.IndexOf( findstr, StringComparison.InvariantCultureIgnoreCase );
                            if ( pos >= 0 )
                            {
                                string[] projectInfo = line.Substring( pos + findstr.Length ).Split( new char[] { ',' } );
                                ProjectInfo project = new ProjectInfo();
                                project.Domain = projectInfo[0].Trim().TrimStart( trimSymbol ).TrimEnd( trimSymbol );
                                project.RootFolder = SolutionFolder;
                                project.csproj = projectInfo[1].Trim().TrimStart( trimSymbol ).TrimEnd( trimSymbol );
                                project.GUID = projectInfo[2].Trim().TrimStart( trimSymbol ).TrimEnd( trimSymbol );
                                project.GettextPath = GettextPath;
                                project.Load( project.csproj );

                                ProjectList.Add( project );
                            }
                        }
                    }
                }
                FileLoaded = true;
            }
        }

        public void Process()
        {
            if ( FileLoaded )
            {
                foreach ( ProjectInfo proj in ProjectList )
                {
                    proj.Process();
                }
            }
        }

        public void MakeLangPO( string locale )
        {
            if ( !string.IsNullOrEmpty( locale ) )
            {
                if ( FileLoaded )
                {
                    Directory.SetCurrentDirectory( SolutionFolder );

                    foreach ( ProjectInfo proj in ProjectList )
                    {
                        proj.MakeLangPO( locale );
                    }
                }
            }
        }

        public void EditPO( string locale )
        {
            if ( !string.IsNullOrEmpty( locale ) )
            {
                if ( FileLoaded )
                {
                    Directory.SetCurrentDirectory( SolutionFolder );

                    foreach ( ProjectInfo proj in ProjectList )
                    {
                        proj.EditPO( locale );
                    }
                }
            }
        }

        public void MakeLangDll( String locale )
        {
            if ( !String.IsNullOrEmpty( locale ) )
            {
                if ( FileLoaded )
                {
                    Directory.SetCurrentDirectory( SolutionFolder );

                    foreach ( ProjectInfo proj in ProjectList )
                    {
                        proj.MakeLangDll( locale );
                    }
                }
            }
        }

        public void MakeLangMO( string locale )
        {
            if ( !string.IsNullOrEmpty( locale ) )
            {
                if ( FileLoaded )
                {
                    Directory.SetCurrentDirectory( SolutionFolder );

                    foreach ( ProjectInfo proj in ProjectList )
                    {
                        proj.MakeLangMO( locale );
                    }
                }
            }
        }

        public void Patch()
        {
            if ( FileLoaded )
            {
                Directory.SetCurrentDirectory( SolutionFolder );

                foreach ( ProjectInfo proj in ProjectList )
                {
                    proj.Patch();
                }
            }
        }

        public SolutionInfo()
        {
        }

        public SolutionInfo( string slnfile )
        {
            Load( slnfile );
        }

    }
}

